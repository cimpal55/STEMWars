@page "/"
@inject IAuthService _authService
@inject ILocalStorageService _localStorage
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authenticationState

<PageTitle>Login</PageTitle>

<h3 style="padding: 20px;">Login</h3>


<EditForm Model="user" OnValidSubmit="HandleLogin" style="padding-left: 20px;">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="user.Email" class="form-control" />
        <ValidationMessage For="@(() => user.Email)" />
    </div>
    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="user.Password" class="form-control" type="password" />
        <ValidationMessage For="@(() => user.Password)" />
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
    <div class="mb-3" style="padding-top: 20px;">
        <a href="/register">Sign Up</a>
    </div>
</EditForm>

<div class="text-danger">
    <span>@errorMessage</span>
</div>

@code {
    private UserLogin user = new UserLogin();

    private string errorMessage = string.Empty;

    private string returnUrl = string.Empty;

    protected override void OnInitialized()
    {
        var uri = _navigationManager.ToAbsoluteUri(_navigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
    }

    private async Task HandleLogin()
    {
        var result = await _authService.Login(user);
        if (result.Success)
        {
            errorMessage = string.Empty;

            await _localStorage.SetItemAsync("authToken", result.Data);
            await _authenticationState.GetAuthenticationStateAsync();
            _navigationManager.NavigateTo(returnUrl);
        }
        else
        {
            errorMessage = result.Message;
        }
    }
}